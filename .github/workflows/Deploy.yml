name: Deploy to Amazon ECS

on:
  workflow_run:
    workflows: ["Docker"]
    types:
      - completed
    branches: [ "main" ]

env:
  AWS_REGION: us-west-2                          # Example AWS region
  ECR_REPOSITORY: my-secure-repo                # Example ECR repository name
  ECS_SERVICE: my-secure-service                # Example ECS service name
  ECS_CLUSTER: my-secure-cluster                # Example ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json # Path to your ECS task definition file
  CONTAINER_NAME: my-secure-container           # Name of the container in the task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
    - name: Get Load Balancer Info
      id: get-lb-info
      run: |
        # Replace 'my-load-balancer-name' with the name of your load balancer
        lb_dns_name=$(aws elbv2 describe-load-balancers --names "my-load-balancer-name" --query "LoadBalancers[0].DNSName" --output text)
        echo $lb_dns_name > deployment-url.txt

    - name: Upload Deployment URL as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: deployment-url
        path: deployment-url.txt
      continue-on-error: true
